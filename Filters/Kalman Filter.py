# -*- coding: utf-8 -*-
"""hw3p3.ipynb

Automatically generated by Colaboratory.
"""

import numpy as np
import matplotlib.pyplot as plt

def KF(x, P, z):
# IMPLEMENT THIS
  p_p = np.matmul(np.matmul(F,P),np.transpose(F)) + Q
  S = np.matmul(np.matmul(H,p_p),np.transpose(H)) + R
  K = np.matmul(np.matmul(p_p,np.transpose(H)),np.linalg.inv(S))
  #print("Innovation Covariance is "+str(S))
  #print("Kalman gain is "+str(K))
  x_p = np.matmul(F,x)
  Y = z - np.matmul(H,x_p)
  x_u = x_p + np.matmul(K,Y)
  I = np.array([[1,0],[0,1]])
  p_u = np.matmul((I - np.matmul(K,H)),p_p)
  P = p_u
  x = x_u
  # print("Innovation is "+str(Y))
  # print("State Covariance is "+str(P))
  return x, P

F = np.array([[1, 0.5], [0, 1]])
H = np.array([[0, 1]])
Q = np.array([[0.1, 0.01], [0.01, 0.05]])
R = 0.1

x = np.array([[0.8, 2]])
xhat = np.array([[2, 4]])
P = np.array([[1,0], [0,2]])

for i in range(100):
  w = np.random.multivariate_normal(np.zeros(2), Q)
  v = np.random.normal(0, R)
  x = np.vstack((x, F @ x[-1,:] + w))
  z = H @ x[-1,:] + v

  xnew, P = KF(xhat[-1,:], P, z)
  xhat = np.vstack((xhat, xnew))

plt.plot(x[:,0], x[:,1], label = "actual state")
plt.plot(xhat[:,0], xhat[:,1], label = "predicted state")
plt.legend()
plt.xlabel('position')
plt.ylabel('velocity')
plt.show()